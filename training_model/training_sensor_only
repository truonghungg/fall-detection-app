import pickle
import numpy as np
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
# Đọc dữ liệu đã lưu
with open('preprocessing/smoothed_processed_data.pkl', 'rb') as f:
    X_train, X_test, y_train, y_test, label_encoder = pickle.load(f)

# Kiểm tra kích thước dữ liệu
num_samples_train, timesteps, num_features = X_train.shape
num_samples_test = X_test.shape[0]
print(f"X_train shape: {X_train.shape}")  # (num_samples_train, timesteps, num_features)
print(f"X_test shape: {X_test.shape}")    # (num_samples_test, timesteps, num_features)

# Chuyển đổi nhãn thành one-hot encoding
num_classes = len(label_encoder.classes_)
y_train_onehot = to_categorical(y_train, num_classes=num_classes)
y_test_onehot = to_categorical(y_test, num_classes=num_classes)

# Kiểm tra kích thước
print("Shape của y_train_onehot:", y_train_onehot.shape)
print("Shape của y_test_onehot:", y_test_onehot.shape)

# Xây dựng mô hình LSTM
model = Sequential()

# Lớp LSTM đầu tiên
model.add(LSTM(64, input_shape=(timesteps, num_features), return_sequences=True))
model.add(Dropout(0.2))  # Dropout để tránh overfitting

# Lớp LSTM thứ hai
model.add(LSTM(32, return_sequences=False))
model.add(Dropout(0.2))

model.add(Dense(num_classes, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# In tóm tắt mô hình
model.summary()
# Huấn luyện mô hình
history = model.fit(
    X_train, y_train_onehot,
    validation_data=(X_test, y_test_onehot),
    epochs=20,  # Số epoch
    batch_size=64,  # Kích thước batch
    verbose=1
)
loss, accuracy = model.evaluate(X_test, y_test_onehot, verbose=1)
print(f"Test Loss: {loss}")
print(f"Test Accuracy: {accuracy}")
model.save('lstm_model.h5')